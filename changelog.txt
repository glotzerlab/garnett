=========
Changelog
=========

The **garnett** package follows `semantic versioning <https://semver.org/>`_.

Version 0.5
===========

Highlights
----------

[0.5.0] -- 201x-xx-xx
---------------------
Added
+++++

	- Added Getar file reader/writer
	- Rowan is now a dependency
	- Added shape_dict representation to Shape classes.
	- Added support for particle properties: mass, charge, diameter, image, moment of inertia and angular momentum
	- Added support for reading/writing shapes in GSD via hpmc state
	- Added universal reader/writer with format detection
	- Extended list of supported shape classes: 
		- Ellipsoid 
		- orientable spheres
		- polygons
		- spheropolygon
		- convex polyhedron
		- convex spheropolyhedron

Changed
+++++++
	- Improved unit test coverage
	- Revised documentation
	- Moved shape definitions to separate module
	- Raise AttributeError if accessing an invalid property
	- Renamed several existing shape classes

Deprecated
++++++++++
	- Tests for Python 2 are no longer updated (Python 2 support will be entirely dropped in a future release)

Removed
+++++++
	- Remove acceleration as supported property
	- Removed the  read_gsd_shape_data flag from GSD reader


Version 0.4
===========

Highlights
----------
	- GetarFileReader skips records that have a non-empty group field.
	- Add CIF readers
	- Add GSD writer
	- Add shape support for shperopoly, polyunion, and convex polyhedron
	union
	- Add `gf2pos` script to convert any supported format to POS
	- Add shape definitions to GetarFileReader.

[0.4.1] -- 201x-xx-xx
---------------------

Fixed
+++++
	- Fix minor bug related to QR check for 2d boxes.

[0.4.0] -- 201x-xx-xx
---------------------

Added
+++++
	- Add readers/writers:
		- CIF reader
		- GSD writer
	- Support shape definitions:
		- spheropoly
		- polyunion
		- convexpolyhedron_union
	- Add `gf2pos` script - convert to pos-file from any supported format.
	- Add shape definitions to GetarFileReader.
	- Interpret the pos-file rotation key word.

Changed
+++++++
	- Improve algorithm for the normalization of frames with non-standard
	box.
	- Various documentation updates.
	- GetarFileReader skips records that have a non-empty group field.

Version 0.3
===========

Highlights
----------
	- Various documentation improvements.
	- Add an optimized cythonized DCDFileReader.
	- Allow trajectory data acess via coherent numpy arrays.
	- Make snapshot creation and copying HOOMD-blue 2.0 compatible.
	- The GSDReader now reads velocities.
	- Support PolyV shape definitions.

[0.3.9] -- 201x-xx-xx
---------------------

Added
+++++
	- The GSDReader now reads velocities.
	- Support PolyV shape definitions.

Changed
+++++++
	- Update documentation concerning the conversion of rotations from
	  quaternions to euler angles.
Fix
+++
	- Fix bug related to trajectory arrays when slicing the array.

[0.3.8] -- 201x-xx-xx
---------------------

Fixed
+++++
	- Hot fix: Negative euler angles were not read correctly in skewed
	  boxes using the DCDFileReader.

[0.3.7] -- 201x-xx-xx
---------------------

Added
+++++
	- Add the 'whence' argument to the file format's seek method.

Fixed
+++++
	- Fix bug in dcdfilereader leading to incorrect box dimensions
	  to be read for skewed boxes. Cubic or squared boxes are not
		affected.

[0.3.6] -- 201x-xx-xx
---------------------

Fixed
+++++
	- Fix quaternion to euler angle conversion example in the
		dcd file reader documentation.

[0.3.5] -- 201x-xx-xx
---------------------

Changed
+++++++
	- GSDHOOMDFileReader uses the native gsd library if installed.
	- Reduced warning verbosity.

Fixed
+++++
	- Fix bug that caused the GSDHOOMDFileReader to ignore dimensions
		specified in the GSD file.

[0.3.4] -- 201x-xx-xx
---------------------

Added
+++++
	- Support velocities in HOOMD-blue XML files.
	- Support SphereUnionShape in PosFileReader

Changed
+++++++
	- Support Pos-Files using the keyword 'box' instead of boxMatrix

Fixed
+++++
	- Fix bug in PosFileReader which occured with non-standard
		pos-file in python 3.5
	- Fix bug, which occured when constructing frames from
	  raw frames using box instances instead of a box matrix.

[0.3.3] -- 201x-xx-xx
---------------------

Fixed
+++++
	- Fix bug related to 2-dimensional systems and a box
	  z-dimensions not equal to 1.

[0.3.2] -- 201x-xx-xx
---------------------

Added
+++++
	- Add trajectory.N, trajectory.type and trajectory.type_ids as
		an alternative mode to access frame length and type information.

Fixed
+++++
	- Fix bug in GSDHOOMDFileReader when not providing template frame.

[0.3.1] -- 201x-xx-xx
---------------------

Changed
+++++++
	- Update the GSD hoomd module.

[0.3.0] -- 201x-xx-xx
---------------------

Added
+++++
	- Provide a highly optimized cythonized DCDFileReader.
	- Allow trajectory data acess via coherent numpy arrays.
	- Make snapshot creation and copying HOOMD-blue 2.0 compatible.

Changed
+++++++

	- Update the GSD module.
	- Improve the Box class documentation.
	- Overall improvement of the documentation.


Fixed
+++++
	- Fix and optimize the pure-python DCDFileReader.

Version 0.2
===========

[0.2.1] -- 201x-xx-xx
---------------------

Fixed
+++++
	- Fix an issue with injavis pos-files causing parser errors.

[0.2.0] -- 201x-xx-xx
---------------------

Fixed
+++++
	- Fix HOOMD-blue snapshot type issue.

Version 0.1
===========

Highlights
----------
	- Frames only loaded into memory on demand.
	- Extend FileFormat API to increase file-like compatibility.
	- Add GSD, XML, DCD, and GETAR readers classes
	- Add CIF writer class

[0.1.9] -- 201x-xx-xx
---------------------

Added
+++++
	- Add GSDHoomdFileReader

Fixed
+++++
	- Fix type issue in HoomdBlueXMLFileReader

[0.1.8] -- 201x-xx-xx
---------------------

Added
+++++
	- Add HoomdBlueXMLFileReader
	- Add DCDFileReader
	- Add CifFileWriter
	- Add GetarFileReader

Fixed
+++++
	- Fix type issue in DCD


[0.1.6] -- 201x-xx-xx
 --------------------

Changed
+++++++
	- Extend FileFormat API to increase file-like compatibility.

Fixed
+++++
	- Fixed box_matrix calculation.

[0.1.5] -- 201x-xx-xx
---------------------

Changed
+++++++
	- Frames only loaded into memory on demand.
	- Improved trajectory iteration logic.
