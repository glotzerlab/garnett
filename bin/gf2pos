#!/usr/bin/env python
# Copyright (c) 2017 The Regents of the University of Michigan
# All rights reserved.
# This software is licensed under the BSD 3-Clause License.

"Convert glotzformats compatible trajectories to POS."
import os
import sys
import argparse
import logging

import glotzformats as gf
from tqdm import tqdm


COLORS = [
    '#00274c',  # blue
    '#ffcb05',  # maize
    '#e41a1c',
    '#377eb8',
    '#4daf4a',
    '#984ea3',
    '#ff7f00',
]

# Mapping of file extension to format
FORMATS = {
    '.pos': 'pos',
    '.gsd': 'gsd',
    '.zip': 'gtar',
    '.tar': 'gtar',
    '.sqlite': 'gtar'
}

# Mapping of format to read input mode
MODES = {
    'pos': 'r',
    'gsd': 'rb',
    'gtar': 'rb'
}


pos_reader = gf.reader.PosFileReader()
pos_writer = gf.writer.PosFileWriter()


def _build_slice(slice_string):
    if slice_string.count(':') == 0: # dump the last n frames
        start, end, step = -int(slice_string), None, 1

    elif slice_string.count(':') == 1:
        start, end = [(None if e == '' else int(e))
                for e in slice_string.split(':')]
        step = None
    elif str.count(':') == 2:
        start, end, step = [(None if e == '' else int(e))
                for e in slice_string.split(':')]
    return slice(start, end, step)


def center_ld(frame):
    from math import pi
    import freud
    import numpy as np
    ld = freud.density.LocalDensity(
        r_cut=2.5, volume=pi**3 * 4 / 3, diameter=1.0)
    b = frame.box
    box = freud.box.Box(Lx=b.Lx, Ly=b.Ly, Lz=b.Lz, xy=b.xy,
                        xz=b.xz, yz=b.yz, is2D=b.dimensions == 2)
    ld.compute(box, np.asarray(frame.positions, dtype=np.float32))
    density = ld.getDensity()
    i_max = np.argmax(density)
    frame.positions -= frame.positions[i_max]
    return frame


def center(frame):
    import numpy as np
    frame.positions -= np.mean(frame.positions, axis=0)
    return frame


def select_center(frame, s):
    import numpy as np
    b = np.diag(frame.box.get_box_matrix())
    b_ = b * s
    select = (np.abs(frame.positions) < b_ / 2).all(axis=1)
    frame.types = [t for i, t in enumerate(frame.types) if select[i]]
    frame.positions = frame.positions[select]
    frame.orientations = frame.orientations[select]
    frame.box.Lx = b_[0]
    frame.box.Ly = b_[1]
    frame.box.Lz = b_[2]
    return frame


def wrap_into_box(frame):
    import numpy as np
    b = np.diag(frame.box.get_box_matrix())
    images = np.round(frame.positions / b)
    frame.positions -= images * b
    return frame


def color_by_type(frame):
    if len(frame.shapedef) > len(COLORS):
        raise RuntimeError("Number of types larger than color map!")
    for sd, color in zip(frame.shapedef, COLORS):
        frame.shapedef[sd].color = color
    return frame


def gf2pos(fn, outfile, args, template=None):
    extension = os.path.splitext(fn)[1]
    informat = FORMATS[
        extension] if args.informat is None else args.informat.lower()
    inmode = MODES[informat]
    frame_slice = _build_slice(args.frames)

    if informat not in MODES:
        print("The input format {} is not supported.".format(informat))
        return

    with open(fn, inmode) as infile:
        if informat == 'gsd':
            gsd_reader = gf.reader.GSDHoomdFileReader()
            traj = gsd_reader.read(infile, template)
        elif informat == 'gtar':
            getar_reader = gf.reader.GetarFileReader()
            traj = getar_reader.read(infile)
        elif informat == 'pos':
            traj = pos_reader.read(infile)

        traj = traj[frame_slice]

        if args.center_by_density:
            traj = (center_ld(f) for f in traj)
        if args.select_center:
            traj = (select_center(f, args.select_center) for f in traj)
        if args.center:
            traj = (center(f) for f in traj)
        if args.wrap_into_box:
            traj = (wrap_into_box(f) for f in traj)
        if args.color_by_type:
            traj = (color_by_type(f) for f in traj)
        pos_writer.write(tqdm(traj), outfile)


def main(args):
    if args.template:
        with open(args.template) as pos:
            template = pos_reader.read(pos)[0]
            template.load()
    else:
        template = None
    if not isinstance(args.infile, list):
        args.infile = [args.infile]
    if args.out:
        if not os.path.isdir(args.out):
            raise ValueError("'{}' must be a directory.".format(args.out))
        for fn in args.infile:
            fn_out = os.path.join(args.out, os.path.splitext(fn)[0] + '.pos')
            print("Writing to '{}'...".format(fn_out), file=sys.stderr)
            if not args.force and os.path.isfile(fn_out):
                print("File '{}' already exists, skipping.".format(fn_out))
            with open(fn_out, 'w') as outfile:
                gf2pos(fn, outfile, args, template)
    else:
        for fn in args.infile:
            gf2pos(fn, sys.stdout, args, template)


if __name__ == '__main__':
    fmts = list(MODES.keys())
    fmt_list = ", ".join(fmts[:-1]) + ", or {}".format(fmts[-1])

    parser = argparse.ArgumentParser(
        description="Convert glotzformats compatible trajectories to POS.")
    parser.add_argument(
        'infile',
        type=str,
        nargs='+',
        help="One or more paths to %s file(s)." % fmt_list)
    parser.add_argument(
        '-i', '--informat',
        type=str,
        choices=(fmt for fmt in MODES),
        help="Specify the input format, one of %s." % fmt_list)
    parser.add_argument(
        '-t', '--template',
        type=str,
        help="Use a (POS) template frame.")
    parser.add_argument(
        '-o', '--out',
        type=str,
        help="Specify an output directory instead "
              "of dumping files to STDOUT.")
    parser.add_argument(
        '-f', '--force',
        action='store_true',
        help="Overwrite existing files. Use with caution.")
    parser.add_argument(
        '--color-by-type',
        action='store_true',
        help="Color particles by type.")
    parser.add_argument(
        '-c', '--center',
        action='store_true',
        help="Center particle positions.")
    parser.add_argument(
        '-d', '--center-by-density',
        action='store_true',
        help="Center particles by local density.")
    parser.add_argument(
        '-w', '--wrap-into-box',
        action='store_true',
        help="Wrap all particles to fit into the box.")
    parser.add_argument(
        '-s', '--select-center',
        type=float,
        help="Select the the fraction of the box.")
    parser.add_argument(
        '-v', '--verbose',
        action='store_true',
        help="Increase output verbosity.")
    parser.add_argument(
        '--frames',
        default=':',
        help='Select which frames to dump. A single number n dumps the final n frames;
              otherwise, python slice-like behavior is assumed.')

    args = parser.parse_args()
    logging.basicConfig(level=logging.WARNING - 10 * int(args.verbose))
    main(args)
